-- Initial Data Exploration

-- Determine the data types of all columns in the "customers" table
select column_name, data_type
from
target-sql-406516.target_sql_business_case_study.INFORMATION_SCHEMA.COLUMNS
where table_name = 'customers';

-- Identify the time range of the order placements
      select 
      		min(order_purchase_timestamp)as Initial,
      		max(order_purchase_timestamp) as Final
   		from `target_sql_business_case_study.orders`


-- Count the cities and states of customers who placed orders during the given period
select 
   		count(distinct(customer_city)) city,
  		count(distinct customer_state) cust_st
from `target_sql_business_case_study.customers` 


-- In-depth Exploration

-- Identify trends in the number of orders placed over the past years
SELECT strftime('%Y', order_purchase_timestamp) AS order_year, COUNT(*) AS order_count
FROM orders
GROUP BY order_year
ORDER BY order_year;

-- Detect monthly seasonality in the number of orders
SELECT strftime('%Y-%m', order_purchase_timestamp) AS order_month, COUNT(*) AS order_count
FROM orders
GROUP BY order_month
ORDER BY order_month;

-- Determine the time of day Brazilian customers mostly place their orders
SELECT 
    CASE
        WHEN strftime('%H', order_purchase_timestamp) BETWEEN '00' AND '06' THEN 'Dawn'
        WHEN strftime('%H', order_purchase_timestamp) BETWEEN '07' AND '12' THEN 'Morning'
        WHEN strftime('%H', order_purchase_timestamp) BETWEEN '13' AND '18' THEN 'Afternoon'
        WHEN strftime('%H', order_purchase_timestamp) BETWEEN '19' AND '23' THEN 'Night'
    END AS time_of_day,
    COUNT(*) AS order_count
FROM orders
GROUP BY time_of_day
ORDER BY time_of_day;

-- Evolution of E-commerce orders in Brazil

-- Get the month-on-month number of orders placed in each state
SELECT c.customer_state,
extract(month from o.order_purchase_timestamp) as month ,
count(o.order_id) ord
from `target_sql_business_case_study.customers` c
join `target_sql_business_case_study.orders` o
on c.customer_id =o.customer_id
group by 1,2
order by month


-- Analyze customer distribution across states
SELECT customer_state, COUNT(*) AS customer_count
FROM customers
GROUP BY customer_state
ORDER BY customer_count DESC;

-- Impact on Economy

-- Calculate the percentage increase in the cost of orders from 2017 to 2018 (Jan to Aug only)
with cost_of_orders as (
Select extract(year from o.order_purchase_timestamp) as year,
extract (month from o.order_purchase_timestamp) as month,
sum(p.payment_value) as total
from `target_sql_business_case_study.orders` o join `target_sql_business_case_study.payments`p
on o.order_id = p.order_id
where extract (year from o.order_purchase_timestamp) in (2017,2018) and
extract (month from o.order_purchase_timestamp) between 1 and 8 group by year, month)
Select year, month, (lead(total)over(order by year - total)/total)*100 as percentage_increase
from cost_of_orders order by month


-- Calculate the total and average value of order prices for each state
select
sum(o.price) Price_Total,
avg(o.price) Price_Average,
c.customer_state
from `target_sql_business_case_study.order_items` o
cross join  `target_sql_business_case_study.customers` c 
group by customer_state


-- Calculate the total and average value of order freight for each state
select
sum(o.freight_value) Freight_Total,
avg(o.freight_value) Freight_Average,
c.customer_state
from `target_sql_business_case_study.order_items` o
cross join  `target_sql_business_case_study.customers` c 
group by customer_state
order by customer_state


-- Analysis based on sales, freight and delivery time

-- Calculate delivery time and difference between estimated and actual delivery date
SELECT order_id, 
       (julianday(order_delivered_customer_date) - julianday(order_purchase_timestamp)) AS time_to_deliver,
       (julianday(order_delivered_customer_date) - julianday(order_estimated_delivery_date)) AS diff_estimated_delivery
FROM orders;

-- Find the top 5 states with the highest and lowest average freight value
SELECT customer_state, AVG(freight_value) AS avg_freight_value
FROM order_items
JOIN orders ON order_items.order_id = orders.order_id
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_state
ORDER BY avg_freight_value DESC
LIMIT 5;

SELECT customer_state, AVG(freight_value) AS avg_freight_value
FROM order_items
JOIN orders ON order_items.order_id = orders.order_id
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_state
ORDER BY avg_freight_value ASC
LIMIT 5;

-- Find the top 5 states with the highest and lowest average delivery time
SELECT customer_state, AVG(julianday(order_delivered_customer_date) - julianday(order_purchase_timestamp)) AS avg_delivery_time
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_state
ORDER BY avg_delivery_time DESC
LIMIT 5;

SELECT customer_state, AVG(julianday(order_delivered_customer_date) - julianday(order_purchase_timestamp)) AS avg_delivery_time
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_state
ORDER BY avg_delivery_time ASC
LIMIT 5;

-- Find the top 5 states where the order delivery is really fast compared to the estimated date of delivery
SELECT customer_state, AVG(julianday(order_delivered_customer_date) - julianday(order_estimated_delivery_date)) AS avg_diff_estimated_delivery
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_state
ORDER BY avg_diff_estimated_delivery ASC
LIMIT 5;

-- Analysis based on payments

-- Find the month-on-month number of orders placed using different payment types
SELECT strftime('%Y-%m', order_purchase_timestamp) AS order_month, payment_type, COUNT(*) AS order_count
FROM payments
JOIN orders ON payments.order_id = orders.order_id
GROUP BY order_month, payment_type
ORDER BY order_month, payment_type;

-- Find the number of orders placed based on payment installments
SELECT payment_installments, COUNT(*) AS order_count
FROM payments
GROUP BY payment_installments
ORDER BY order_count DESC;
